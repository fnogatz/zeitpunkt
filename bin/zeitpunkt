#!/usr/bin/env node

const program = require('commander')
const geobuf = require('geobuf')
const map = require('map-stream')
const through = require('through')
const spinner = require('char-spinner')

spinner()

const zeitpunkt = require('../index')

program
  .version(require('../package.json').version)
  .description('Read in geo data with time components and transform it')
  .usage('[options]')
  .option('--split-by <points>', 'Split trajectories if more than this points', parseInt)
  .option('--lat <range>', 'Omit points outside of this latitude range (default: "-90,90")')
  .option('--lon <range>', 'Omit points outside of this longitude range (default: "-180,180")')
  .option('--eps <number>', 'Minimum distance between two points (default: 0.001)')
  .option('--simplify <tolerance>', 'Simplify by given tolerance (default: 0.0001)', parseFloat)
  .option('--simplify-high-quality', 'Use high-quality simplification, approx. 15 times slower')
  .option('--logical-to-unix-time <zerovalue>', 'Convert logical time to UNIX time', parseFloat)
  .option('-i, --indentation <spaces>', 'Set JSON indentation level (default: 0)', parseInt)
  .option('--from-csv', 'Import from CSV')
  .option('--csv-delimiter <char>', 'Column delimiter (default: ",")')
  .option('--csv-columns <names>', 'List of columns (default: "id,date,lon,lat')
  .option('--csv-ignore <rows>', 'Ignore first rows (default: 0)')
  .option('--csv-proj-utm <zone,hemisphere>', 'Transform coordinates from UTM, e.g. "32N"')
  .option('-b, --to-geobuf', 'Export as Geobuf')
  .option('-a, --to-json-array', 'Export as JSON Array instead of newline-separated datasets')
  .parse(process.argv)

let options

program.indentation = program.indentation || 0

function print (obj) {
  if (program.toGeobuf) {
    const buf = geobuf.featureToGeobuf(obj)
    process.stdout.write(buf.encode().toBuffer())
    return
  }

  console.log(JSON.stringify(obj, null, Array(program.indentation + 1).join(' ')))
}

let stream = process.stdin

// from CSV?
if (program.fromCsv) {
  options = {
    delimiter: program.csvDelimiter,
    columns: program.csvColumns,
    ignore: program.csvIgnore,
    projUtm: program.csvProjUtm
  }

  stream = stream.pipe(zeitpunkt.fromCSV(options))
}

// clean?
if (program.lat || program.lon || program.eps) {
  options = {
    eps: program.eps,
    lat: program.lat,
    lon: program.lon
  }

  stream = stream.pipe(map(function (geojson, callback) {
    callback(null, zeitpunkt.clean(options, geojson))
  }))
}

// transform?
if (typeof program.logicalToUnixTime !== 'undefined') {
  options = {
    time: function (time) {
      return parseInt(time * 1000 + (program.logicalToUnixTime || 0), 10)
    }
  }

  stream = stream.pipe(map(function (geojson, callback) {
    callback(null, zeitpunkt.transform({
      time: function (time) {
        return time * 1000
      }
    }, geojson))
  }))
}

// simplify?
if (program.simplify) {
  options = {
    tolerance: program.simplify,
    highQuality: program.simplifyHighQuality
  }

  stream = stream.pipe(map(function (geojson, callback) {
    callback(null, zeitpunkt.simplify(options, geojson))
  }))
}

// split?
if (program.splitBy) {
  options = {
    points: program.splitBy
  }

  stream = stream.pipe(through(function write (geojson) {
    const self = this
    zeitpunkt.split(options, geojson).forEach(function (chunk) {
      self.queue(chunk)
    })
  }, function end () {
    this.queue(null)
  }))
}

// as Array?
if (program.toJsonArray) {
  const arr = []
  stream = stream.pipe(through(function write (geojson) {
    arr.push(geojson)
  }, function end () {
    this.queue(arr)
  }))
}

stream.on('data', function (geojson) {
  print(geojson)
})

stream.on('error', function (err) {
  throw err
})
